// ‚öôÔ∏è CONFIGURACI√ìN
const ZOOM_CLIENT_ID = 'ZOOM_CLIENT_ID';
const ZOOM_CLIENT_SECRET = 'ZOOM_CLIENT_SECRET';
const ZOOM_ACCOUNT_ID = 'ZOOM_ACCOUNT_ID';
const ZOOM_API_BASE = 'https://api.zoom.us/v2';

const MODO_TEST = false;
const FECHA_TEST = '2025-06-11';
const MINUTA_AGENDA = 'MINUTA_AGENDA';

const SHEET_ID = '1IoPaHNxCj8ptqhgjJZJ-9HgxFum_RK6QGXEakKP37ig';
const SHEET_NAME = '1';

const SESSION_FOLDERS = {
  "Reuni√≥n Diaria - Desarrollo": {
    folderId: '1D3WHHerMv2_9EgkVa_s8uLGnR3c9pnTm',
    summaryFolderId: '1D3WHHerMv2_9EgkVa_s8uLGnR3c9pnTm'
  },
  "Juan Bautista (Desarrollo Kabzo)'s Zoom Meeting - AGENDA": {
    videoFolderId: '15lqM-r3h7VYHEoSn5-6RTerkNWlVUakD',
    summaryFolderId: '1dGuDzOo6ezpHWT2KQ2e-Pz3uYn4hHW3b'
  },
  "Sala de reuniones personales de Juan Bautista (Desarrollo Kabzo)": {
    videoFolderId: '1RLc8-nVaQXNTvtQ1BzyhParGmGObEwA3',
    summaryFolderId: '1RLc8-nVaQXNTvtQ1BzyhParGmGObEwA3'
  }
};


let cachedAccessToken = null;

// üîê Escapa texto para Markdown V2 (sin afectar links)
function escapeMarkdown(text) {
  if (!text) return '';
  return text.replace(/([!_*\(\)~`>#+\-=|{}\.])/g, '\\$1');
}


// üß† Obtener token OAuth de Zoom
function getAccessToken() {
  if (cachedAccessToken) return cachedAccessToken;

  const url = `https://zoom.us/oauth/token?grant_type=account_credentials&account_id=${ZOOM_ACCOUNT_ID}`;
  const basicAuth = Utilities.base64Encode(`${ZOOM_CLIENT_ID}:${ZOOM_CLIENT_SECRET}`);

  const options = {
    method: 'post',
    headers: { Authorization: 'Basic ' + basicAuth },
    muteHttpExceptions: true
  };

  const response = UrlFetchApp.fetch(url, options);
  if (response.getResponseCode() !== 200) {
    throw new Error('Error al obtener access token: ' + response.getContentText());
  }

  const data = JSON.parse(response.getContentText());
  cachedAccessToken = data.access_token;
  return cachedAccessToken;
}

// üì© Mensaje por Telegram
function sendTelegramMessage(text) {
  const TELEGRAM_TOKEN = '7606306039:TELEGRAM_TOKEN'; 
    // const TELEGRAM_TOKEN = '7355470023:TELEGRAM_TOKEN';  //aana
  const CHAT_ID = 'CHAT_ID'; 
    // const CHAT_ID = '2133367923'; //aana√ü


  const payload = {
    chat_id: CHAT_ID,
    text,
    parse_mode: 'MarkdownV2',
    disable_web_page_preview: true
  };

  const response = UrlFetchApp.fetch(
    `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`,
    { method: 'post', payload, muteHttpExceptions: true }
  );

  if (response.getResponseCode() !== 200) {
    Logger.log('Error enviando mensaje Telegram: ' + response.getContentText());
  } else {
    Logger.log('‚úÖ Mensaje enviado correctamente por Telegram.');
  }
}

// üìÖ Grabaciones del d√≠a
function getTodayRecordings() {
  let date;
  if (MODO_TEST) {
    date = FECHA_TEST;
  } else {
    const today = new Date();
    date = Utilities.formatDate(today, Session.getScriptTimeZone(), 'yyyy-MM-dd');
  }

  const url = `${ZOOM_API_BASE}/users/me/recordings?from=${date}&to=${date}`;

  const response = UrlFetchApp.fetch(url, {
    method: 'get',
    headers: { 'Authorization': 'Bearer ' + cachedAccessToken },
    muteHttpExceptions: true
  });

  if (response.getResponseCode() !== 200) {
    throw new Error('Error al obtener grabaciones: ' + response.getContentText());
  }

  const data = JSON.parse(response.getContentText());
  return data.meetings || [];
}


// üßæ Obtener IDs ya procesados
function getProcessedKeys(sheet) {
  const data = sheet.getDataRange().getValues();
  const keys = new Set();
  for (let i = 1; i < data.length; i++) {
    keys.add(data[i][2] + '|' + Utilities.formatDate(new Date(data[i][1]), Session.getScriptTimeZone(), 'yyyy-MM-dd'));
  }
  return keys;
}


// üíæ Guardar archivo MP4 en Drive
function saveFileToDrive(file, folderId) {
  const nameDate = file.recording_start.replace(/:/g, '-').replace('T', ' ').split('.')[0];
  const extension = file.file_type.toLowerCase();
  const name = `${nameDate} - ${file.recording_type}.${extension}`;

  const folder = DriveApp.getFolderById(folderId);
  const existing = folder.getFilesByName(name);

  if (existing.hasNext()) {
    Logger.log('Archivo ya existe en Drive: ' + name);
    return existing.next().getId();
  }

  try {
    const url = file.download_url + '?access_token=' + cachedAccessToken;
    const blob = UrlFetchApp.fetch(url).getBlob().setName(name);
    const fileDrive = folder.createFile(blob);
    Logger.log('Archivo guardado: ' + name);
    return fileDrive.getId();
  } catch (e) {
    Logger.log('‚ùå Error guardando MP4: ' + e.message);
    return null;
  }
}

// üìë Obtener resumen oficial de Zoom
function getOfficialMeetingSummary(uuid) {
  const encodedUUID = encodeURIComponent(encodeURIComponent(uuid));
  const url = `${ZOOM_API_BASE}/meetings/${encodedUUID}/meeting_summary`;

  const response = UrlFetchApp.fetch(url, {
    method: 'get',
    headers: { 'Authorization': 'Bearer ' + cachedAccessToken },
    muteHttpExceptions: true
  });

  if (response.getResponseCode() !== 200) {
    Logger.log(`‚ùå No se pudo obtener resumen para UUID ${uuid}`);
    return null;
  }

  const data = JSON.parse(response.getContentText());
  let content = '';

  if (data.summary_overview) content += `üìã RESUMEN GENERAL:\n${data.summary_overview}\n\n`;
  if (data.summary) content += `üìù RESUMEN DETALLADO:\n${data.summary}\n\n`;

  if (Array.isArray(data.summary_details)) {
    content += 'üîç DETALLES:\n';
    data.summary_details.forEach(det => {
      content += `- ${det.label}:\n${det.summary}\n\n`;
    });
  }

  if (Array.isArray(data.next_steps)) {
    content += 'üöÄ PR√ìXIMOS PASOS:\n';
    data.next_steps.forEach(step => content += `- ${step}\n`);
    content += '\n';
  }

  if (Array.isArray(data.question_and_answer)) {
    content += '‚ùì Q&A:\n';
    data.question_and_answer.forEach((qa, i) => {
      content += `${i + 1}. Q: ${qa.question}\n   A: ${qa.answer}\n`;
    });
    content += '\n';
  }

  if (data.summary_last_modified_user_email) {
    content += `‚úçÔ∏è Editado por: ${data.summary_last_modified_user_email}\n\n`;
  }

  return content.trim() || 'No hay resumen disponible para esta reuni√≥n.';
}

// üß† Extraer secci√≥n "Pr√≥ximos pasos"
function extractNextStepsFromSummary(text) {
  if (!text) return 'No hay pr√≥ximos pasos disponibles.';
  const match = text.match(/üöÄ PR√ìXIMOS PASOS:\n([\s\S]*?)(\n\n|$)/);
  return match && match[1] ? match[1].trim() : 'No hay pr√≥ximos pasos disponibles.';
}



function main() {
  const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName(SHEET_NAME);
  if (!sheet) throw new Error('Hoja no encontrada: ' + SHEET_NAME);

  cachedAccessToken = getAccessToken();

    const recordings = getTodayRecordings();
  Logger.log('Cantidad de grabaciones encontradas hoy: ' + recordings.length);

  const processedKeys = getProcessedKeys(sheet);
  Logger.log('Cantidad de sesiones ya procesadas en hoja: ' + processedKeys.size);


  // const processedKeys = getProcessedKeys(sheet);
  // const recordings = getTodayRecordings();

  if (recordings.length === 0) {
    Logger.log('‚ö†Ô∏è No hay grabaciones para hoy');
  }

  recordings.forEach(recording => {
    const recordingDate = Utilities.formatDate(new Date(recording.start_time), Session.getScriptTimeZone(), 'yyyy-MM-dd');
    const key = recording.topic + '|' + recordingDate;

    if (processedKeys.has(key)) {
      Logger.log(`‚è© Ya procesado: ${key}`);
      return; // Sigue con la siguiente sesi√≥n
    }

    const sessionName = recording.topic;
    const folders = SESSION_FOLDERS[sessionName];
    if (!folders) {
      Logger.log(`‚ö†Ô∏è Sesi√≥n NO configurada en SESSION_FOLDERS: ${sessionName}`);
      return;
    }

    Logger.log(`üé¨ Procesando sesi√≥n: ${sessionName}`);

    try {
      // Buscar video en grabaci√≥n (Zoom)
      let videoDriveLink = '';
      recording.recording_files.forEach(file => {
        if (file.file_type === 'MP4') {
          const folderId = folders.folderId || folders.videoFolderId;
          const id = saveFileToDrive(file, folderId);
          if (id) videoDriveLink = `https://drive.google.com/file/d/${id}/view`;
        }
      });

      if (!videoDriveLink) {
        Logger.log(`‚ö†Ô∏è No hay video para sesi√≥n: ${sessionName}`);
      } else {
        Logger.log(`‚úÖ Video encontrado y guardado: ${videoDriveLink}`);
      }

      // Buscar resumen directamente en Zoom (si existe)
      let resumenLink = '';
      let resumen = '';
      if (folders.summaryFolderId) {
        resumen = getOfficialMeetingSummary(recording.uuid);
        if (resumen && resumen !== 'No hay resumen disponible para esta reuni√≥n.') {
          Logger.log(`‚úÖ Resumen encontrado para sesi√≥n: ${sessionName}`);

          const folder = DriveApp.getFolderById(folders.summaryFolderId);
          const fecha = Utilities.formatDate(new Date(recording.start_time), Session.getScriptTimeZone(), 'yyyy-MM-dd');
          const nombre = `${sessionName} - ${fecha}`;

          let docId = null;
          const files = folder.getFilesByName(nombre);
          if (files.hasNext()) {
            docId = files.next().getId();
            Logger.log(`üìé Resumen ya existe en Drive: ${nombre}`);
          } else {
            const doc = DocumentApp.create(nombre);
            doc.getBody().setText(resumen);
            doc.saveAndClose();
            const file = DriveApp.getFileById(doc.getId());
            folder.addFile(file);
            DriveApp.getRootFolder().removeFile(file);
            docId = doc.getId();
            Logger.log(`üÜï Resumen guardado en Drive: ${nombre}`);
          }
          resumenLink = `https://docs.google.com/document/d/${docId}/edit`;
        } else {
          Logger.log(`‚ö†Ô∏è No hay resumen para sesi√≥n: ${sessionName}`);
        }
      }

      if (!videoDriveLink && !resumenLink) {
        Logger.log(`‚ùå No hay video ni resumen para sesi√≥n: ${sessionName}. No se env√≠a mensaje.`);
        return;
      }

      const rawSteps = extractNextStepsFromSummary(resumen);
      const pasos = rawSteps
        .split('\n')
        .filter(l => l.trim() !== '')
        .map(l => `‚û°Ô∏è ${l.trim()}`)
        .join('\n');

      const isAgenda = sessionName.toLowerCase().includes('agenda');
      const linkExtra = isAgenda
        ? 'üóíÔ∏è *Minuta para seguimiento:*\nhttps://docs.google.com/spreadsheets/d/' + escapeMarkdown(MINUTA_AGENDA) + '/edit'
        : escapeMarkdown('Quedamos atentos a cualquier comentario');

      const mensaje =
        `Buen d√≠a, comparto los datos de la sesi√≥n *${escapeMarkdown(sessionName)}*:\n\n` +
        `üé• *Video link:*\n${escapeMarkdown(videoDriveLink)}\n\n` +
        `üìù *Resumen link:*\n${escapeMarkdown(resumenLink)}\n\n` +
        `üöÄ *Pr√≥ximos pasos:*\n${escapeMarkdown(pasos)}\n\n` +
        `${escapeMarkdown(linkExtra)}`;

      sendTelegramMessage(mensaje);
      Logger.log(`‚úÖ Mensaje enviado para sesi√≥n: ${sessionName}`);

      if (isAgenda) {
        guardarAcuerdosEnMinutas(pasos, videoDriveLink, resumenLink);
      }

      sheet.appendRow([recording.id, new Date(recording.start_time), sessionName]);

    } catch (e) {
      Logger.log(`‚ùå Error procesando sesi√≥n "${sessionName}": ${e.message}`);
    }
  });
}
